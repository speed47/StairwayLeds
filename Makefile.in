# The name of your project (used to name the compiled .hex file)
TARGET = $(shell basename $(CURDIR))

# Folder where the .ino and .c/.cpp/.h files are located
SKETCHSRC = stairs

# Path were the arduino install is located
ARDUINOPATH = #ARDUINO_PATH#

# The teensy version to use, 30 or 31
TEENSY = #TEENSY_VERSION#

# Set to 24000000, 48000000, or 96000000 to set CPU core speed
TEENSY_CORE_SPEED = #FREQUENCY#000000

# configurable options
OPTIONS = -DUSB_SERIAL -DLAYOUT_US_ENGLISH

# less size at the cost of speed
OPTIONS += -Os
# vs. more speed at the cost of size (has sometimes adverse effects!!)
#OPTIONS += -O2

# compile-time optim, needs modified ld script, and removing dupe strlen
# also breaks usb serial for now. don't forget to distclean.
#OPTIONS += -flto

# libs to compile
TEENSYLIBS = OctoWS2811

# optional: cppclean location
CPPCLEAN = $(HOME)/cppclean/cppclean

###### END OF CONFIGURATION ###################################
###############################################################

#************************************************************************
# Location of Teensyduino utilities, Toolchain, and Arduino Libraries.
# To use this makefile without Arduino, copy the resources from these
# locations and edit the pathnames.  The rest of Arduino is not needed.
#************************************************************************

# directory to build in
BUILDDIR = $(abspath $(CURDIR)/build)

# path location for Teensy Loader, teensy_post_compile and teensy_reboot
TOOLSPATH = $(ARDUINOPATH)/hardware/tools

ifeq ($(OS),Windows_NT)
    $(error What is Win Dose?)
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Darwin)
        TOOLSPATH = /Applications/Arduino.app/Contents/Resources/Java/hardware/tools/
    endif
endif

# path location for Teensy 3 core
COREPATH = $(shell find $(ARDUINOPATH) -type d -name teensy3)

# path location for Arduino libraries
LIBRARYBASEDIR = $(ARDUINOPATH)/hardware/teensy/avr/libraries
ifeq ($(wildcard $(LIBRARYBASEDIR)),)
    LIBRARYBASEDIR = $(ARDUINOPATH)/libraries
endif
LIBRARYPATH = $(foreach lib,$(TEENSYLIBS),$(LIBRARYBASEDIR)/$(lib))

# path location for the arm-none-eabi compiler
COMPILERPATH = $(TOOLSPATH)/arm-none-eabi/bin
ifeq ($(wildcard $(COMPILERPATH)),)
    COMPILERPATH = $(TOOLSPATH)/arm/bin
endif

# Some libraries will require those two to be defined
# arduino version
ARDUINOFULL = $(shell head -n1 $(ARDUINOPATH)/lib/version.txt)
ARDUINO     = $(shell head -n1 $(ARDUINOPATH)/lib/version.txt | sed -re 's/[^0-9]//g')
ifeq ($(ARDUINO),)
    $(warning Could not autodetect ARDUINO version, using dummy value)
    ARDUINOFULL = 1
    ARDUINO     = 1
endif
# teensyduino version
TEENSYDUINOFULL = $(shell cat $(ARDUINOPATH)/lib/teensyduino.txt)
TEENSYDUINO     = $(shell sed -re 's/[^0-9]//g' $(ARDUINOPATH)/lib/teensyduino.txt)
ifeq ($(TEENSYDUINO),)
    # hacky way to find the version number on old versions
    TEENSYDUINOFULL = $(shell strings $(ARDUINOPATH)/hardware/tools/teensy | grep -Eo '^Teensy Loader [.0-9a-z-]+' | head -n1 | sed -re 's/Teensy Loader //')
    TEENSYDUINO     = $(shell strings $(ARDUINOPATH)/hardware/tools/teensy | grep -Eo '^Teensy Loader [.0-9]+' | head -n1 | sed -re 's/Teensy Loader //;s/[^0-9]//g')
    # fallback's fallback
    ifeq ($(TEENSYDUINO),)
        $(warning Could not autodetect TEENSYDUINO version, using dummy value)
        TEENSYDUINOFULL = 1
        TEENSYDUINO     = 1
    endif
endif

#************************************************************************
# Settings below this point usually do not need to be edited
#************************************************************************

GITREVISION = $(shell git log -n 1 --pretty=format:%h 2>/dev/null || echo unknown)
GITBRANCH   = $(shell git branch | grep '*' | cut -d' ' -f2- | sed -re 's/"/_/g' || echo nobranch)
GITDIRTYTMP = $(shell git diff 2>/dev/null | md5sum | cut -c1-8)
BUILDTIME = $(shell date | sed -re 's/"/_/g')
ifeq ($(GITDIRTYTMP), d41d8cd9)
    GITDIRTY = clean
else
    GITDIRTY = dirty-$(GITDIRTYTMP)
endif

# gcc filter
GCCFILTER = $(shell which gccfilter)
ifeq ($(GCCFILTER),)
	GCCFILTER=
else
	GCCFILTER += -c
endif

# CPPFLAGS = compiler options for C and C++
CPPFLAGS = -Wall -Werror -g -mcpu=cortex-m4 -mthumb -nostdlib -fdata-sections -ffunction-sections -MMD $(OPTIONS) -DF_CPU=$(TEENSY_CORE_SPEED) -I$(SKETCHSRC) -I$(COREPATH)
CPPFLAGS += -DTIME_T=$(shell date +%s)
CPPFLAGS += -DGIT_REVISION="$(GITREVISION)"
CPPFLAGS += -DGIT_DIRTY="$(GITDIRTY)"
CPPFLAGS += -DGIT_BRANCH="\"$(GITBRANCH)\""
CPPFLAGS += -DBUILD_TIME="\"$(BUILDTIME)\""
CPPFLAGS += -DRTC_COMPENSATE=#RTC_COMPENSATE#
CPPFLAGS += -DPROJECT_DEBUG=#PROJECT_DEBUG#
ifeq ($(GCCFILTER),)
CPPFLAGS += -DTIMEZONE="\"#TIMEZONE#\""
else
CPPFLAGS += -DTIMEZONE="\\\"#TIMEZONE#\\\""
endif

# compiler options for C++ only
CXXFLAGS = -std=gnu++0x -felide-constructors -fno-exceptions -fno-rtti -Wno-c++14-compat

# compiler options for C only
CFLAGS = -std=gnu99


FLASHSIZE30=131072
RAMSIZE30=16384
FLASHSIZE31=262144
RAMSIZE31=65536
# compiler options specific to teensy version
ifeq ($(TEENSY), 30)
    CPPFLAGS += -D__MK20DX128__
    LDSCRIPT = $(COREPATH)/mk20dx128.ld
    FLASHSIZE=$(FLASHSIZE30)
    RAMSIZE=$(RAMSIZE30)
else
    ifeq ($(TEENSY), 31)
        CPPFLAGS += -D__MK20DX256__
        LDSCRIPT = $(COREPATH)/mk20dx256.ld
        FLASHSIZE=$(FLASHSIZE31)
        RAMSIZE=$(RAMSIZE31)
    else
        $(error Invalid setting for TEENSY)
    endif
endif


# set arduino define if given
ifdef ARDUINO
	CPPFLAGS += -DARDUINO=$(ARDUINO)
endif
ifdef TEENSYDUINO
	CPPFLAGS += -DTEENSYDUINO=$(TEENSYDUINO)
endif

# linker options
LDFLAGS = $(OPTIONS) -Os -Wl,--gc-sections -mcpu=cortex-m4 -mthumb --specs=nano.specs -T$(LDSCRIPT) -Wl,-Map,$(TARGET).map

# additional libraries to link
LIBS = -lm

# names for the compiler programs
CC = $(GCCFILTER) $(abspath $(COMPILERPATH))/arm-none-eabi-gcc
AR = $(GCCFILTER) $(abspath $(wildcard $(COMPILERPATH))/arm-none-eabi*-ar)
CXX = $(GCCFILTER) $(abspath $(COMPILERPATH))/arm-none-eabi-g++
OBJCOPY = $(GCCFILTER) $(abspath $(COMPILERPATH))/arm-none-eabi-objcopy
SIZE = $(GCCFILTER) $(abspath $(COMPILERPATH))/arm-none-eabi-size

# automatically create lists of the sources and objects
LC_FILES := $(shell find $(LIBRARYPATH) -type f -name ".c")
LCPP_FILES := $(shell find $(LIBRARYPATH) -type f -name "*.cpp")
TC_FILES := $(shell find $(COREPATH) -type f -name "*.c")
TCPP_FILES := $(shell find $(COREPATH) -type f -name "*.cpp")
C_FILES := $(shell find $(SKETCHSRC) -type f -name "*.c")
CPP_FILES := $(shell find $(SKETCHSRC) -type f -name "*.cpp")
INO_FILES := $(shell find $(SKETCHSRC) -type f -name "*.ino")

# include paths for libraries
L_INC := $(foreach lib,$(filter %/, $(wildcard $(LIBRARYPATH)/*/)), -I$(lib))
L_INC += $(foreach lib,$(LIBRARYPATH), -I$(lib))

SOURCES_SKETCH := $(C_FILES:.c=.o) $(CPP_FILES:.cpp=.o) $(INO_FILES:.ino=.o)
SOURCES_CORE   := $(TC_FILES:.c=.o) $(TCPP_FILES:.cpp=.o) $(LC_FILES:.c=.o) $(LCPP_FILES:.cpp=.o)
OBJS_SKETCH := $(foreach $(SKETCHSRC),$(SOURCES_SKETCH), $(BUILDDIR)/$($(SKETCHSRC)))
OBJS_CORE   := $(foreach $(SKETCHSRC),$(SOURCES_CORE), $(BUILDDIR)/$($(SKETCHSRC)))

$(warning Working with arduino $(ARDUINOFULL) and teensyduino $(TEENSYDUINOFULL))

all: hex

build: $(TARGET).elf

hex: $(TARGET).hex

post_compile: $(TARGET).hex
	@$(abspath $(TOOLSPATH))/teensy_post_compile -file="$(basename $<)" -path=$(CURDIR) -tools="$(abspath $(TOOLSPATH))"

reboot:
	@-$(abspath $(TOOLSPATH))/teensy_reboot

upload: post_compile reboot

screen:
	@while ! test -r /dev/ttyACM0 ; do echo -n . ; sleep 1 ; done ; screen /dev/ttyACM0

cppclean:
	@$(CPPCLEAN) -I $(SKETCHSRC) -I $(COREPATH) $(L_INC) $(C_FILES) $(CPP_FILES) $(INO_FILES)

$(BUILDDIR)/%.o: %.c
	@/bin/echo -e "[CC]\t$<"
	@mkdir -p "$(dir $@)"
	@$(CC) $(CPPFLAGS) $(CFLAGS) $(L_INC) -o "$@" -c "$<"

$(BUILDDIR)/%.o: %.cpp
	@/bin/echo -e "[CXX]\t$<"
	@mkdir -p "$(dir $@)"
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(L_INC) -o "$@" -c "$<"

$(BUILDDIR)/%.o: %.ino
	@/bin/echo -e "[CXX]\t$<"
	@mkdir -p "$(dir $@)"
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(L_INC) -o "$@" -x c++ -include Arduino.h -c "$<"

$(TARGET).elf: $(OBJS_SKETCH) $(BUILDDIR)/core.a $(LDSCRIPT)
	@/bin/echo -e "[LD]\t$@"
	@$(CC) $(LDFLAGS) -o "$@" $(OBJS_SKETCH) $(BUILDDIR)/core.a $(LIBS)

$(BUILDDIR)/core.a: $(OBJS_CORE)
	@/bin/echo -e "[AR]\t$@"
	@$(AR) rcs $(BUILDDIR)/core.a $(OBJS_CORE)

%.hex: %.elf
	@/bin/echo -e "[HEX]\t$@"
	@/bin/echo -e "[REV]\tgit.$(GITREVISION).$(GITBRANCH).$(GITDIRTY)"
	@$(SIZE) "$<" | awk '{ if (NR==2) { FLASH=$$1+$$2; RAM=$$2+$$3 } } END { printf "[FLASH]\t%6d/%6d (teensy30: %4.1f%%, teensy31: %4.1f%%)\n[RAM]\t%6d/%6d (teensy30: %4.1f%%, teensy31: %4.1f%%)\n", FLASH, $(FLASHSIZE), FLASH/$(FLASHSIZE30)*100, FLASH/$(FLASHSIZE31)*100, RAM, $(RAMSIZE), RAM/$(RAMSIZE30)*100, RAM/$(RAMSIZE31)*100 }'
	@$(OBJCOPY) -O ihex -R .eeprom "$<" "$@"

# compiler generated dependency info
-include $(OBJS_SKETCH:.o=.d)
-include $(OBJS_CORE:.o=.d)

clean:
	@echo "Cleaning sketch build (use distclean to clean teensy lib objects too)..."
	@rm -rfv "$(BUILDDIR)/$(SKETCHSRC)"
	@rm -fv "$(TARGET).elf" "$(TARGET).hex" "$(TARGET).map"

distclean:
	@echo Cleaning...
	@rm -rfv "$(BUILDDIR)"
	@rm -fv "$(TARGET).elf" "$(TARGET).hex" "$(TARGET).map"

showvars:
	@echo CC=$(CC)
	@echo AR=$(AR)
	@echo ARDUINO=$(ARDUINO)
	@echo ARDUINOFULL=$(ARDUINOFULL)
	@echo ARDUINOPATH=$(ARDUINOPATH)
	@echo BUILDDIR=$(BUILDDIR)
	@echo BUILDTIME=$(BUILDTIME)
	@echo CC=$(CC)
	@echo C_FILES=$(C_FILES)
	@echo CFLAGS=$(CFLAGS)
	@echo COMPILERPATH=$(COMPILERPATH)
	@echo COREPATH=$(COREPATH)
	@echo CPPCLEAN=$(CPPCLEAN)
	@echo CPP_FILES=$(CPP_FILES)
	@echo CPPFLAGS=$(CPPFLAGS)
	@echo CXX=$(CXX)
	@echo CXXFLAGS=$(CXXFLAGS)
	@echo GCCFILTER=$(GCCFILTER)
	@echo GITBRANCH=$(GITBRANCH)
	@echo GITDIRTYTMP=$(GITDIRTYTMP)
	@echo GITREVISION=$(GITREVISION)
	@echo INO_FILES=$(INO_FILES)
	@echo LC_FILES=$(LC_FILES)
	@echo LCPP_FILES=$(LCPP_FILES)
	@echo LDFLAGS=$(LDFLAGS)
	@echo LIBRARYBASEDIR=$(LIBRARYBASEDIR)
	@echo LIBRARYPATH=$(LIBRARYPATH)
	@echo LIBS=$(LIBS)
	@echo L_INC=$(L_INC)
	@echo OBJCOPY=$(OBJCOPY)
	@echo OBJS_CORE=$(OBJS_CORE)
	@echo OBJS_SKETCH=$(OBJS_SKETCH)
	@echo OPTIONS=$(OPTIONS)
	@echo SIZE=$(SIZE)
	@echo SKETCHSRC=$(SKETCHSRC)
	@echo SOURCES_CORE=$(SOURCES_CORE)
	@echo SOURCES_SKETCH=$(SOURCES_SKETCH)
	@echo TARGET=$(TARGET)
	@echo TC_FILES=$(TC_FILES)
	@echo TCPP_FILES=$(TCPP_FILES)
	@echo TEENSY=$(TEENSY)
	@echo TEENSY_CORE_SPEED=$(TEENSY_CORE_SPEED)
	@echo TEENSYDUINO=$(TEENSYDUINO)
	@echo TEENSYDUINOFULL=$(TEENSYDUINOFULL)
	@echo TEENSYLIBS=$(TEENSYLIBS)
	@echo TOOLSPATH=$(TOOLSPATH)
