#include <limits.h>
#include "PatternPlasma.h"
#include "Arduino.h"
#include "globals.h"
#include "makeColor.h"
#include "printbuf.h"

PatternPlasma::PatternPlasma(unsigned int delayBetweenPhases) : _delayBetweenPhases(delayBetweenPhases)
{
}

int8_t cos_wave[512] =
{
  -128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-126,-126,-126,-126,-125,-125,-125,-124,-124,-124,-123,-123,-122,-122,-122,-121,-121,-120,-120,-119,-118,-118,-117,-117,-116,-115,-115,-114,-113,-112,-112,-111,-110,-109,-109,-108,-107,-106,-105,-104,-103,-102,-101,-101,-100,-99,-98,-97,-96,-94,-93,-92,-91,-90,-89,-88,-87,-86,-84,-83,-82,-81,-80,-78,-77,-76,-75,-73,-72,-71,-70,-68,-67,-66,-64,-63,-61,-60,-59,-57,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-39,-37,-36,-34,-32,-31,-29,-28,-26,-25,-23,-22,-20,-19,-17,-16,-14,-12,-11,-9,-8,-6,-5,-3,-2,0,1,2,4,5,7,8,10,11,13,15,16,18,19,21,22,24,25,27,28,30,31,33,35,36,38,39,40,42,43,45,46,48,49,51,52,54,55,56,58,59,60,62,63,65,66,67,69,70,71,72,74,75,76,77,79,80,81,82,83,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,100,101,102,103,104,105,106,107,108,108,109,110,111,111,112,113,114,114,115,116,116,117,117,118,119,119,120,120,121,121,121,122,122,123,123,123,124,124,124,125,125,125,125,126,126,126,126,126,126,126,126,126,126,127,126,126,126,126,126,126,126,126,126,126,125,125,125,125,124,124,124,123,123,123,122,122,121,121,121,120,120,119,119,118,117,117,116,116,115,114,114,113,112,111,111,110,109,108,108,107,106,105,104,103,102,101,100,100,99,98,97,96,95,93,92,91,90,89,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,63,62,60,59,58,56,55,54,52,51,49,48,46,45,43,42,40,39,38,36,35,33,31,30,28,27,25,24,22,21,19,18,16,15,13,11,10,8,7,5,4,2,1,0,-2,-3,-5,-6,-8,-9,-11,-12,-14,-16,-17,-19,-20,-22,-23,-25,-26,-28,-29,-31,-32,-34,-36,-37,-39,-40,-41,-43,-44,-46,-47,-49,-50,-52,-53,-55,-56,-57,-59,-60,-61,-63,-64,-66,-67,-68,-70,-71,-72,-73,-75,-76,-77,-78,-80,-81,-82,-83,-84,-86,-87,-88,-89,-90,-91,-92,-93,-94,-96,-97,-98,-99,-100,-101,-101,-102,-103,-104,-105,-106,-107,-108,-109,-109,-110,-111,-112,-112,-113,-114,-115,-115,-116,-117,-117,-118,-118,-119,-120,-120,-121,-121,-122,-122,-122,-123,-123,-124,-124,-124,-125,-125,-125,-126,-126,-126,-126,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127
};

inline int fastCosineCalc( unsigned int preWrapVal )
{
  return cos_wave[preWrapVal % 512];
}

uint8_t ucos_wave[512] =
{
  0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3,3,4,4,5,5,5,6,6,7,7,8,9,9,10,10,11,12,12,13,14,15,15,16,17,18,18,19,20,21,22,23,24,25,26,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,43,44,45,46,47,49,50,51,52,54,55,56,57,59,60,61,63,64,66,67,68,70,71,72,74,75,77,78,80,81,83,84,86,87,88,90,91,93,95,96,98,99,101,102,104,105,107,108,110,111,113,115,116,118,119,121,122,124,125,127,129,130,132,133,135,136,138,139,141,143,144,146,147,149,150,152,153,155,156,158,159,161,163,164,166,167,168,170,171,173,174,176,177,179,180,182,183,184,186,187,188,190,191,193,194,195,197,198,199,200,202,203,204,205,207,208,209,210,211,213,214,215,216,217,218,219,220,221,223,224,225,226,227,228,228,229,230,231,232,233,234,235,236,236,237,238,239,239,240,241,242,242,243,244,244,245,245,246,247,247,248,248,249,249,249,250,250,251,251,251,252,252,252,253,253,253,253,254,254,254,254,254,254,254,254,254,254,255,254,254,254,254,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,251,250,250,249,249,249,248,248,247,247,246,245,245,244,244,243,242,242,241,240,239,239,238,237,236,236,235,234,233,232,231,230,229,228,228,227,226,225,224,223,221,220,219,218,217,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,191,190,188,187,186,184,183,182,180,179,177,176,174,173,171,170,168,167,166,164,163,161,159,158,156,155,153,152,150,149,147,146,144,143,141,139,138,136,135,133,132,130,129,127,125,124,122,121,119,118,116,115,113,111,110,108,107,105,104,102,101,99,98,96,95,93,91,90,88,87,86,84,83,81,80,78,77,75,74,72,71,70,68,67,66,64,63,61,60,59,57,56,55,54,52,51,50,49,47,46,45,44,43,41,40,39,38,37,36,35,34,33,31,30,29,28,27,26,26,25,24,23,22,21,20,19,18,18,17,16,15,15,14,13,12,12,11,10,10,9,9,8,7,7,6,6,5,5,5,4,4,3,3,3,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0
};

inline uint8_t fastUCosineCalc( unsigned int preWrapVal )
{
  return ucos_wave[preWrapVal % 512];
}

void PatternPlasma::_animate(direction_t direction)
{
  float time = random(0, 512);

  const int ylim = 120;

  float y = -ylim;
  float yinc = 0.3;
  int mainLuminosity = 30;
  unsigned int lastPhaseChange = 0;

  int phase = 1;
  float humanPositionOffset = 0;
  while (1)
  {
    ++this->_iterations;
    dbg2("plasma running with y=%.1f", y);
    float humanPosition = (this->elapsed() / 1000.0 * _humanWalkingSpeed) - humanPositionOffset;
    float humanPositionLed = humanPosition * _ledsPerMeter;
    for (int i = 0, x = -(NBLEDS/2); i < NBLEDS; i++, x++)
    {
      int luminosity;
      uint8_t r = 0;
      uint8_t g = 0;
      uint8_t b = 0;
      if (phase == 1)
      {
        if      (humanPositionLed <  i    ) { luminosity = 0; }
        else if (humanPositionLed >= i + 1) { luminosity = mainLuminosity; }
        else
        {
          luminosity = mainLuminosity * (humanPositionLed - (int)humanPositionLed);
          dbg3("phase=%d humanPositionLed=%.1f led.%d=%d", phase, humanPositionLed, i, luminosity);
        }
      }
      else if (phase == 2)
      {
        luminosity = mainLuminosity;
      }
      else
      {
        if      (humanPositionLed >  i    ) { luminosity = 0; }
        else if (humanPositionLed <= i - 1) { luminosity = mainLuminosity; }
        else
        {
          luminosity = mainLuminosity * (1 - (humanPositionLed - (int)humanPositionLed));
          dbg3("phase=%d humanPositionLed=%.1f led.%d=%d", phase, humanPositionLed, i, luminosity);
        }
      }
      if (luminosity > 0)
      {
        int cx = x + fastCosineCalc(time*3)/32;
        int cy = y + fastCosineCalc(time*2 + 128)/32;

        int v1 = fastCosineCalc((cx*cx+cy*cy)/64+time);
        int v2 = fastCosineCalc(2*x+time);
        int v3 = fastCosineCalc(((x * fastCosineCalc(time*5)) + (y * fastCosineCalc(time*4)))/32 + time);

        int v = (v1+v2+v3);

        r = fastUCosineCalc(v);
        g = fastUCosineCalc(2*v+128);
        b = fastUCosineCalc(3*v+256);
      }
      setPix(direction, LEDS_OFFSET, x + NBLEDS/2 , (r << 16) | (g << 8) | b);
    }

    leds.show();

    if (phase == 1 && humanPositionLed > NBLEDS)
    {
      phase = 2;
      humanPositionOffset = humanPosition;
      lastPhaseChange = this->elapsed();
    }
    else if (phase == 2)
    {
      if (this->elapsed() - lastPhaseChange > _delayBetweenPhases)
      {
        phase = 3;
        humanPositionOffset += humanPosition;
      }
    }
    else if (phase == 3 && humanPositionLed > NBLEDS)
    {
      break;
    }

    time += 0.1;
    y += yinc;
    if (y <= -ylim || y >= ylim) { yinc = -yinc; }
  }
}


